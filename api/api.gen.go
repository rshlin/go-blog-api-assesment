// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// CreatePost defines model for CreatePost.
type CreatePost struct {
	Author  string `json:"author"`
	Content string `json:"content"`
	Title   string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	Msg string `json:"msg"`
}

// PaginatedPosts defines model for PaginatedPosts.
type PaginatedPosts struct {
	Data         []Post `json:"data"`
	PageMetadata *struct {
		Page  int `json:"page"`
		Size  int `json:"size"`
		Total int `json:"total"`
	} `json:"pageMetadata,omitempty"`
}

// Post defines model for Post.
type Post struct {
	Author  string `json:"author"`
	Content string `json:"content"`
	Id      int    `json:"id"`
	Title   string `json:"title"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Page Page number
	Page int `form:"page" json:"page"`

	// Size Number of items per page
	Size int `form:"size" json:"size"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = CreatePost

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = Post

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of all blog posts
	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams)
	// Create a new blog post
	// (POST /posts)
	CreatePost(w http.ResponseWriter, r *http.Request)
	// Delete a blog post
	// (DELETE /posts/{id})
	DeletePost(w http.ResponseWriter, r *http.Request, id int)
	// Retrieve details of a specific blog post
	// (GET /posts/{id})
	GetPostById(w http.ResponseWriter, r *http.Request, id int)
	// Update an existing blog post
	// (PUT /posts/{id})
	UpdatePost(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "size" -------------

	if paramValue := r.URL.Query().Get("size"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "size"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPostById operation middleware
func (siw *ServerInterfaceWrapper) GetPostById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/posts", wrapper.GetPosts).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts", wrapper.CreatePost).Methods("POST")

	r.HandleFunc(options.BaseURL+"/posts/{id}", wrapper.DeletePost).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/posts/{id}", wrapper.GetPostById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts/{id}", wrapper.UpdatePost).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/bNhT9K8TdHoVadjOg0FudbkMeVhjL9hTkgZaubRYSqZJXWV3D/324pD5sWc7i",
	"xWuQzk+WRfPcD51zdOkNpKYojUZNDpINuHSFhfSX1xYl4cw44m+lNSVaUujXZEUrY/mK1iVCAo6s0kvY",
	"RpAaTahpcI0U5Tiwso3A4udKWcwguat/1kFFTbz7qNlp5p8wJcb82dqQyX6GhVv+cyD+0RDmTC6VloQZ",
	"V+8OwTNJkj8VYeFv/GhxAQn8MOq6OapbOfId3LZRpLVyzd9LucTfkGQDth+CV3cKUJpwiZb3OfX1yAoZ",
	"kvnQUq9sj10DNbsO29DvFZKEKJQ+2LNzEkVlRyp8GoFUBtEpLOKuYlpZRetbfmoh96l0Kn1f0aoVBu+Z",
	"811oIVZEJWwZQemF8amFHGGam6WY5ZIWxhbi/ewGInhA65TRkMD4Tfwm5pJMiVqWChJ4628xMWjlExiV",
	"Df2W6PvEnZWkjL7JIIFfkQI/eYuVBRJaB8ndBjJ0qVUlhVAzuUShq2KOFjhNSOBzhXYNEWjpa6oJ0bWQ",
	"bIVRbQZeTUqroiogGUcD5OoH/OhjCbMQXiCiRCvqEEPRax4ej34Q8Z5/7UqjXXhSkzjmjx1GybLMVep7",
	"NfrkOKsN4BdZlHkrL1a4CisPMq+wE/Zdx1t47y/EeIdICVyHK3+XqTpumQl/8KcYA3elDzIZBJnUIJM+",
	"yAS4UK+71hDGjf7Hcav3cRxvPQO7jj3qR/vm5nfuP7/bKk3RuUWVi5ZxTNWrk9uMjTm3Hfa+DFOZCX7e",
	"yNb49NSD1w9kvIcXwU9nS/QW7QNagV3gZ2baA4zAVUUh7RoS+B3JKnxAIUWuHLF+ZJ6LOftIcAJ+a9Q2",
	"u28FO+/qICR0NDXZ+lRV1OBtE54ugwP+P71XO8kHHve0Pf52VRwT8wnqMg2leyZsHInUV5q9Ki1dndz/",
	"Y4l+NCTCo1BfuQlnyLUPyem+PVO6vxg7V1mG+iyZ7qC9Mn+qByP/WtwZie7u+e3UuVdQsZBC41+dZ3mI",
	"MMeMNirb+pcs5kh4aGIf/P3axB6faFhMNx+aeYIHpm6c8MPfs4aJq5DlQcSQ+EW+/3f5XgWGnCFJTytt",
	"SCxMpc/T0z7k9+k2wSuE3HWa6NFj0nR9k72wr8TfwyDz6g8HF/V+y7NMhiRV7vxhRrgSU7VQ6b5qy2pA",
	"tX+WmXypYeD8x6dQTSaCbvdU2yxdt39TNaJtVrx4/410t/+hA51UUc+Nnl3YoGqqgHqZzi7T2cXfX3Y6",
	"CwIXUgv8ohwpvdw7EXokhg52Xtm8/iM9GY1yk8p8ZRwl7+J3MWzvt38HAAD///0Ft5WjGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
